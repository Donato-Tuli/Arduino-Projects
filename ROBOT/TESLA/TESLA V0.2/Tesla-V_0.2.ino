
//#define CONTALUCI3   //Tenere commentata se non si vuole attivare il contaluci numero 3

#include <SPI.h>
#include <Wire.h>
#include <EEPROM.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#define OLED_RESET 28
#define ORARIO 3        //Pin fase B encoder
#define ANTIORARIO 24   //Pin fase A encoder
#define PULSANTE 22     //Pin pulsante encoder
#define CONFERMA 26      //Pin pulsante di conferma
Adafruit_SSD1306 display(OLED_RESET);
#if (SSD1306_LCDHEIGHT != 32)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif
bool StatoP = 1;             //Varibile della lettura del pulsante dell'encoder
bool StatoC = 1;
volatile int Posizione = 0;  //Variabile che viene modificata quando l'interrupt 0 è attivo
volatile int REGOLAZIONE = 0; //Variabile della seconda struttura switch case
volatile int MENU = 0;       //Variabile della prima struttura switch case
int DB = 50;                 //Delay di debounce del pulsante
volatile int ST = 0, CL1 = 0, R1 = 0, a1 = 0, CL2 = 0, R2 = 0, a2 = 0; //Variabili in cui vengono inseriti i valori settati e da inviare al programma del robot
#ifdef CONTALUCI3
volatile int CL3 = 0, R3 = 0, a3 = 0; //Stesse variabili di quelle precedenti, ma che vengono inviate solo se è definito CONTALUCI3
#endif

int avantidx = 13;            //AVANTI DESTRA
int dietrodx = 12;            //DIETRO DESTRA
int pwm_dx = 11;              //PWM MOTORE DESTRO
int avantisx = 9;             //AVANTI SINISTRA
int dietrosx = 8;             //DIETRO SINISTRA
int pwm_sx = 10;              //PWM MOTORE SINISTRO
int buzzer = 7;               //PIN BUZZER
int led_verde = 6;            //PIN LED VERDE
int led_rosso = 5;            //PIN LED ROSSO
int led_blu = 4;              //PIN LED BLU
int fotI, fotS, Suono, Gas;   //VARIABILI DI LETTURA DELLE LDR, DEL SUONO E DEL GAS
float x, y, z, B;             //VARIABILI DI LETTURA DEL BAFFO E DEI VALORI ANALOGICI RESTITUITI DAGLI SHARP
float SHARPFRONTALE;          //VARIABILE IN CUI E' CONTENUTA LA DISTANZA IN CM DELLO SHARP FRONTALE
float SHARPLATERALE1;         //VARIABILE IN CUI E' CONTENUTA LA DISTANZA IN CM DELLO SHARP LATERALE 1
float SHARPLATERALE2;         //VARIABILE IN CUI E' CONTENUTA LA DISTANZA IN CM DELLO SHARP LATERALE 2
float DistFront;              //VARIABILE PER FARE IL CONSTRAIN DELLO SHARP FRONTALE
float DistLate1;              //VARIABILE PER FARE IL CONSTRAIN DEL PRIMO SHARP LATERALE
float DistLate2;              //VARIABILE PER FARE IL CONSTRAIN DEL SECONDO SHARP LATERALE
int conta_luci = 0;           //VARIABILE CHE SI INCREMENTA OGNI VOLTA CHE VIENE TROVATA UNA LUCE
int est = 0;                  //VARIABILE CHE CONTA GLI ANGOLI ESTERNI NEL CASO SI PERDESSE
float W1, W2, D1, D2, S1, S2; //PARAMETRI PER MODIFICARE LE VELOCITA'
int H = 120;                  //VELOCITA' MOTORI STANDARD
bool f = 0;                   //FLAG PER FAR FARE L'ANGOLO ESTERNO CONTINUANDO LA LETTURA
long int t0 = 0, t1 = 0;      //VARIABILI DI TEMPO PER FARE L'ANGOLO ESTERNO CONTINUANDO LA LETTURA
float l, lunga, DistLunga;    //VARIABILI SHARP A LUNGA DISTANZA
bool s = 0;                   //FLAG LETTURA SUONO
long int s1 = 0, s2 = 0;      //VARIABILI DI TEMPO PER GESTIRE LA LETTURA DEL SUONO
bool f1 = 0, f2 = 0, f3 = 0;

const unsigned char PROGMEM ledoled [] = {    //Logo Led
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xF0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xF8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xEC,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xC6,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x86,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFE,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xFE,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x30,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x30,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x38,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char PROGMEM START [] = {    //Logo Partenza
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8E, 0x38, 0xE3, 0x8E,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8E, 0x38, 0xE3, 0x8E,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8E, 0x38, 0xE3, 0x8E,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0xC7, 0x1C, 0x70,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0xC7, 0x1C, 0x70,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0xC7, 0x1C, 0x70,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8E, 0x38, 0xE3, 0x8E,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8E, 0x38, 0xE3, 0x8E,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8E, 0x38, 0xE3, 0x8E,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0xC7, 0x1C, 0x70,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0xC7, 0x1C, 0x70,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0xC7, 0x1C, 0x70,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8E, 0x38, 0xE3, 0x8E,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8E, 0x38, 0xE3, 0x8E,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8E, 0x38, 0xE3, 0x8E,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0xE7, 0x3C, 0xF8,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x88, 0xA6, 0x20,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x88, 0xA2, 0x20,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x88, 0xA2, 0x20,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x8F, 0xBC, 0x20,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x88, 0xB8, 0x20,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x88, 0xAC, 0x20,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x88, 0xA6, 0x20,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x88, 0xA3, 0x20,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const unsigned char PROGMEM ROTAZIONE [] = {    //Logo Rotazione
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFC, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x07, 0xC0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0xE0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x70,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC0, 0x00, 0x38,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x87, 0xFC, 0x18,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x8E, 0x0C,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 0x0C,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x86, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8C, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xF8, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xB8, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x9C, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x8E, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x87, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xE3, 0x8C,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x18,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x38,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x70,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x00, 0xE0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7E, 0x07, 0xC0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0xFF, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


const unsigned char PROGMEM alfa [] = {   //Logo Angolo
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xFC, 0x00, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFE, 0x00, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x87, 0x00, 0x0C,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x03, 0x80, 0x0C,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x01, 0xC0, 0x18,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0xC0, 0x18,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x60, 0x30,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x60, 0x30,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x30, 0x60,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x30, 0x60,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x18, 0xC0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x18, 0xC0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x0D, 0xC0,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x0F, 0x80,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x07, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x0E, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x1E, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x3B, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x73, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0xE1, 0x8C,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFF, 0xC1, 0xFC,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0x80, 0x70,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void setup() {
  pinMode(avantidx, OUTPUT);
  pinMode(dietrodx, OUTPUT);
  pinMode(pwm_dx, OUTPUT);
  pinMode(avantisx, OUTPUT);
  pinMode(dietrosx, OUTPUT);
  pinMode(pwm_sx, OUTPUT);
  pinMode(buzzer, OUTPUT);
  pinMode(led_verde, OUTPUT);
  pinMode(led_rosso, OUTPUT);
  pinMode(led_blu, OUTPUT);
  pinMode(39, INPUT_PULLUP);
  pinMode(ORARIO, INPUT);
  pinMode(ANTIORARIO, INPUT);
  pinMode(PULSANTE, INPUT_PULLUP);
  pinMode(CONFERMA, INPUT_PULLUP);
  attachInterrupt(1, VARIAZIONE, RISING);     //Interrupt che richiama la funzione variazione
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  //Imposta l'indirizzo i2c
  display.clearDisplay();                     //Pulisce il buffer da inviare al display
  display.setTextSize(4);                     //Imposta la grandezza del testo
  display.setTextColor(WHITE);                //Imposta il colore del testo (Solo bianco)
  display.setCursor(0, 0);                    //Imposta la posizione del cursore (Larghezza,Altezza)
  display.println("ONLYM");                   //Stringa da visualizzare
  display.display();                          //Invia il buffer da visualizzare al display
  delay(1000);                                //Fa visualizzare la scritta all' accensione per un secondo
  Serial.begin(9600);

  digitalWrite(led_verde, HIGH);
  digitalWrite(led_rosso, HIGH);
  digitalWrite(led_blu, HIGH);
}

void loop() {
  StatoP = digitalRead(PULSANTE); //Lettura del pulsante dell'encoder
  StatoC = digitalRead(CONFERMA); //Lettura del pulsante di conferma

  switch (MENU)
  {
    case 0:
      LETTURA();
      if (!StatoP)
      {
        MENU = 1;
        Posizione = 0;
      }
      if (!StatoC)
      {
        MENU = 2;
      }
      break;


    case 1:
      switch (REGOLAZIONE)
      {
        case 0:     //Partenza
          display.clearDisplay();
          display.setTextSize(4);
          display.setTextColor(WHITE);
          display.setCursor(0, 0);
          display.println(Posizione);
          display.drawBitmap(0, 0, START, 128, 32, WHITE);
          display.display();
          if (!StatoP)
          {
            ST = Posizione;
            EEPROM.write(0, ST);
            REGOLAZIONE = 1;
            delay(DB);
            Posizione = 5;
          }
          break;


        case 1:   //CONTA LUCI 1
          display.clearDisplay();
          display.setTextSize(4);
          display.setTextColor(WHITE);
          display.setCursor(0, 0);
          display.println(Posizione);
          display.setTextSize(2);
          display.setCursor(70, 0);
          display.println("C.L");
          display.setCursor(80, 16);
          display.println("1");
          display.drawBitmap(0, 0, ledoled, 128, 32, WHITE);
          display.display();
          if (!StatoP)
          {
            CL1 = Posizione;
            EEPROM.write(1, CL1);
            REGOLAZIONE = 2;
            delay(DB);
            Posizione = 10;
          }
          break;


        case 2:   //ROTAZIONE 1
          display.clearDisplay();
          display.setTextSize(4);
          display.setTextColor(WHITE);
          display.setCursor(0, 0);
          if (Posizione % 2 == 0)
          {
            display.println("DES");
          }
          else
          {
            display.println("SIN");
          }
          display.drawBitmap(0, 0, ROTAZIONE, 128, 32, WHITE);
          display.display();
          if (!StatoP)
          {
            R1 = Posizione;
            EEPROM.write(2, R1);
            REGOLAZIONE = 3;
            delay(DB);
            Posizione = 90;
          }
          break;


        case 3:   //ANGOLO 1
          display.clearDisplay();
          display.setTextSize(4);
          display.setTextColor(WHITE);
          display.setCursor(0, 0);
          display.println(Posizione);
          display.drawBitmap(0, 0, alfa, 128, 32, WHITE);
          display.display();
          if (!StatoP)
          {
            a1 = Posizione;
            EEPROM.write(3, a1);
            REGOLAZIONE = 4;
            delay(DB);
            Posizione = 10;
          }
          break;


        case 4:   //CONTA LUCI 2
          display.clearDisplay();
          display.setTextSize(4);
          display.setTextColor(WHITE);
          display.setCursor(0, 0);
          display.println(Posizione);
          display.setTextSize(2);
          display.setCursor(70, 0);
          display.println("C.L");
          display.setCursor(80, 16);
          display.println("2");
          display.drawBitmap(0, 0, ledoled, 128, 32, WHITE);
          display.display();
          if (!StatoP)
          {
            CL2 = Posizione;
            EEPROM.write(4, CL2);
            REGOLAZIONE = 5;
            delay(DB);
            Posizione = 10;
          }
          break;


        case 5:   //ROTAZIONE 2
          display.clearDisplay();
          display.setTextSize(4);
          display.setTextColor(WHITE);
          display.setCursor(0, 0);
          if (Posizione % 2 == 0)
          {
            display.println("DES");
          }
          else
          {
            display.println("SIN");
          }
          display.drawBitmap(0, 0, ROTAZIONE, 128, 32, WHITE);
          display.display();
          if (!StatoP)
          {
            R2 = Posizione;
            EEPROM.write(5, R2);
            REGOLAZIONE = 6;
            delay(DB);
            Posizione = 90;
          }
          break;


        case 6:   //ANGOLO 2
          display.clearDisplay();
          display.setTextSize(4);
          display.setTextColor(WHITE);
          display.setCursor(0, 0);
          display.println(Posizione);
          display.drawBitmap(0, 0, alfa, 128, 32, WHITE);
          display.display();
          if (!StatoP)
          {
            a2 = Posizione;
            EEPROM.write(6, a2);
            REGOLAZIONE = 7;
            delay(DB);
            Posizione = 15;
          }
          break;


#ifdef CONTALUCI3

        case 7:   //CONTA LUCI 3
          display.clearDisplay();
          display.setTextSize(4);
          display.setTextColor(WHITE);
          display.setCursor(0, 0);
          display.println(Posizione);
          display.setTextSize(2);
          display.setCursor(70, 0);
          display.println("C.L");
          display.setCursor(80, 16);
          display.println("3");
          display.drawBitmap(0, 0, ledoled, 128, 32, WHITE);
          display.display();
          if (!StatoP)
          {
            CL3 = Posizione;
            EEPROM.write(7, CL3);
            REGOLAZIONE = 8;
            delay(DB);
            Posizione = 10;
          }
          break;


        case 8:   //ROTAZIONE 3
          display.clearDisplay();
          display.setTextSize(4);
          display.setTextColor(WHITE);
          display.setCursor(0, 0);
          if (Posizione % 2 == 0)
          {
            display.println("DES");
          }
          else
          {
            display.println("SIN");
          }
          display.drawBitmap(0, 0, ROTAZIONE, 128, 32, WHITE);
          display.display();
          if (!StatoP)
          {
            R3 = Posizione;
            EEPROM.write(8, R3);
            REGOLAZIONE = 9;
            delay(DB);
            Posizione = 90;
          }
          break;


        case 9:   //ANGOLO 3
          display.clearDisplay();
          display.setTextSize(4);
          display.setTextColor(WHITE);
          display.setCursor(0, 0);
          display.println(Posizione);
          display.drawBitmap(0, 0, alfa, 128, 32, WHITE);
          display.display();
          if (!StatoP)
          {
            a3 = Posizione;
            EEPROM.write(9, a3);
            REGOLAZIONE = 10;
            delay(DB);
            Posizione = 0;
          }
          break;

#endif


        default:    //Scrive tutti i valori
          LETTURA();
          if (!StatoP)
          {
            REGOLAZIONE = 10; //Se viene premuto non succede niente
            delay(DB);
            Posizione = 0;
          }
          if (!StatoC)
          {
            MENU = 2; //Se viene premuto il robot è pronto a partire
            delay(DB);
          }
          break;
      }
      break;   //fine case 1 (Regolazione dei parametri)

    case 2:    //Caso in cui i parametri sono già regolati
      display.clearDisplay();
      display.setTextSize(4);
      display.setTextColor(WHITE);
      display.setCursor(0, 0);
      display.println("OK");
      display.display();
      PERIMETRO();

      if (est >= 5) {
        analogWrite(pwm_dx, 95);
        analogWrite(pwm_sx, 200 + (est * 4));
        digitalWrite(avantidx, 1);
        digitalWrite(dietrodx, 0);
        digitalWrite(avantisx, 1);
        digitalWrite(dietrosx, 0);
        delay(1500);
      }

      if (conta_luci == EEPROM.read(1) && f1 == 0) {
        STOP();
        delay(300);
        if (EEPROM.read(2) % 2 == 0) {
          ruotadx(0, 0);
          delay((400L * EEPROM.read(3)) / 90);
        }
        else {
          ruotasx(0, 0);
          delay((400L * EEPROM.read(3)) / 90);
        }
        AVANTI(0, 0);
        while (digitalRead (39)) {}
        f1 = 1;
      }

      if (conta_luci == EEPROM.read(4) && f2 == 0) {
        STOP();
        delay(300);
        if (EEPROM.read(5) % 2 == 0) {
          ruotadx(0, 0);
          delay((400L * EEPROM.read(6)) / 90);
        }
        else {
          ruotasx(0, 0);
          delay((400L * EEPROM.read(6)) / 90);
        }
        AVANTI(0, 0);
        while (digitalRead (39)) {}
        f2 = 1;
      }

#ifdef CONTALUCI3

      if (conta_luci == EEPROM.read(7) && f3 == 0) {
        STOP();
        delay(300);
        if (EEPROM.read(8) % 2 == 0) {
          ruotadx(0, 0);
          delay((400L * EEPROM.read(9)) / 90);
        }
        else {
          ruotasx(0, 0);
          delay((400L * EEPROM.read(9)) / 90);
        }
        AVANTI(0, 0);
        while (digitalRead (39)) {}
        f3 = 1;
      }
#endif


      Serial.print(Gas);
      Serial.print("         ");
      Serial.print(fotI);
      Serial.print("    ");
      Serial.print(fotS);
      Serial.print("    ");
      Serial.println();
      break;
  }
}








void VARIAZIONE()   //Funzione richiamata quando viene attivato l' interrupt
{
  if (digitalRead(ANTIORARIO))
  {
    Posizione++;
  }

  else
  {
    Posizione--;
  }

  if (Posizione <= 0)
  {
    Posizione = 0;
  }

  if (REGOLAZIONE == 3 || REGOLAZIONE == 6 || REGOLAZIONE == 9) //Istruzione per far incrementa di 5 il valore dell'angolo e non di 1
  {
    if (digitalRead(ANTIORARIO))
    {
      Posizione += 4;
    }

    else
    {
      Posizione -= 4;
    }

    if (Posizione <= 0)
    {
      Posizione = 0;
    }
  }
}


